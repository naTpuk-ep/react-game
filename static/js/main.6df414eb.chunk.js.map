{"version":3,"sources":["interfaces.ts","constants.ts","initState.ts","Game.ts","Components/Cell.tsx","Components/Modal.tsx","Components/Grid.tsx","sounds/swipe.mp3","Components/GameWrapper.tsx","saveGame.ts","Components/Menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellStates","sizes","setDifferentCell","cells","size","diffCell","setCell","getRandomCoord","some","cell","x","y","getValue","valuesArr","Math","floor","random","length","value","id","Date","now","state","NEW","initCells","cell1","cell2","Game","prevState","this","JSON","parse","localStorage","getItem","find","game","getXYCells","map","stringify","matrix","createMatrixFromCells","prevX","nextX","nextY","prevY","checkValues","Yindex","Xindex","push","canMove","isMoving","newCells","filter","DYING","INCREASE","score","highScore","IDLE","key","rotateMatrixFromDirection","moveCell","rotateMatrixToDirection","by","forEach","nextRow","currRow","MOVING","reverse","i","j","temp","_rotateMatrix","Array","from","Cell","border","useState","currValue","setCurrValue","highLight","setHighLight","cellRef","createRef","useEffect","onTransitionEnd","event","current","addEventListener","removeEventListener","className","getValueStyle","ref","onAnimationEnd","toString","style","height","width","lineHeight","left","top","Modal","type","setModal","replayHandler","exitHandler","setCanMove","onClick","undefined","Grid","props","gameState","setGameState","playSwipe","setCells","modal","delay","ms","a","Promise","resolve","setTimeout","handler","moveCells","removeAndIncreaseCells","populateField","finish","document","cellSize","transform","_","GameWrapper","volume","setVolume","newStates","setItem","saveGame","useSound","swipeSound","Menu","prevSizeHandler","nextSizeHandler","startHandler","App","startState","undoMode","initState","play","setPlay","setSize","indexOf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6df414eb.chunk.js","sourcesContent":["import Game from \"./Game\";\r\n\r\nexport type Size = 4 | 6 | 8;\r\n\r\nexport type ModalType = \"2048\" | \"gameover\" | \"never\" | undefined;\r\n\r\nexport enum CellStates {\r\n\tIDLE = \"IDLE\",\r\n\tMOVING = \"MOVING\",\r\n\tDYING = \"DYING\",\r\n\tINCREASE = \"INCREASE\",\r\n\tNEW = \"NEW\",\r\n}\r\n\r\nexport interface ICell {\r\n\tx: number;\r\n\ty: number;\r\n\tvalue: number;\r\n\tid: number;\r\n\tstate: CellStates;\r\n\tby?: ICell;\r\n}\r\n\r\nexport type Matrix = Array<Array<ICell | null>>;\r\n\r\nexport interface IGameState {\r\n\tsize: Size;\r\n\tundoMode: boolean;\r\n\tcells: ICell[];\r\n\tscore: number;\r\n\thighScore: number;\r\n\tprevState: IGameState | null;\r\n}\r\n\r\nexport type IStates = Array<IGameState>;\r\n\r\nexport interface IStartBtnProps {\r\n\tstartHandler(): void;\r\n\tgame: Game;\r\n}\r\n\r\nexport interface IGameWrapperProps {\r\n\tgameState: IGameState;\r\n\texitHandler(): void;\r\n}\r\n\r\nexport interface IMenuProps {\r\n\tprevSizeHandler(): void;\r\n\tnextSizeHandler(): void;\r\n\tstartHandler(): void;\r\n\tsize: Size;\r\n}\r\n\r\nexport interface ICellProps {\r\n\tx: number;\r\n\ty: number;\r\n\tvalue: number;\r\n\tsize: number;\r\n\tborder: number;\r\n\tstate: CellStates;\r\n}\r\n\r\nexport interface IGridProps {\r\n\tgameState: IGameState;\r\n\tsetGameState: Function;\r\n\treplayHandler(): void;\r\n\texitHandler(): void;\r\n\tplaySwipe: Function;\r\n}\r\n\r\nexport type Key = \"ArrowLeft\" | \"ArrowDown\" | \"ArrowRight\" | \"ArrowUp\";\r\n\r\nexport interface ModalProps {\r\n\ttype: ModalType;\r\n\treplayHandler(): void;\r\n\texitHandler(): void;\r\n\tsetModal: Function;\r\n\tsetCanMove: Function;\r\n}\r\n","import { Size } from \"./interfaces\";\r\n\r\nexport const sizes: Size[] = [4, 6, 8];\r\n","import { sizes } from \"./constants\";\r\nimport { CellStates, ICell, IGameState, IStates, Size } from \"./interfaces\";\r\n\r\nexport const getPrevState = (size: Size) =>\r\n\tJSON.parse(localStorage.getItem(\"2048\")!).find(\r\n\t\t(game: IGameState) => game.size === size\r\n\t);\r\n\r\nexport const setDifferentCell = (cells: ICell[], size: Size): ICell => {\r\n\tconst diffCell = setCell(getRandomCoord(size), getRandomCoord(size));\r\n\tif (cells.some(cell => diffCell.x === cell.x && diffCell.y === cell.y)) {\r\n\t\treturn setDifferentCell(cells, size);\r\n\t}\r\n\treturn diffCell;\r\n};\r\n\r\nconst getValue = () => {\r\n\tconst valuesArr = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\r\n\tconst randomIndex = Math.floor(Math.random() * valuesArr.length);\r\n\treturn valuesArr[randomIndex];\r\n};\r\n\r\nexport const getRandomCoord = (size: Size): number => Math.floor(Math.random() * size);\r\n\r\nexport const setCell = (x: number, y: number): ICell => {\r\n\treturn {\r\n\t\tx,\r\n\t\ty,\r\n\t\tvalue: getValue(),\r\n\t\tid: Date.now(),\r\n\t\tstate: CellStates.NEW,\r\n\t};\r\n};\r\n\r\n\r\nexport const initCells = (size: Size): ICell[] => {\r\n\tconst cell1: ICell = setCell(getRandomCoord(size), getRandomCoord(size));\r\n\tconst cell2: ICell = setDifferentCell([cell1], size);\r\n\tcell2.id! += 1;\r\n\r\n\treturn [cell1, cell2];\r\n};\r\n\r\nexport const initState = () => {\r\n\tif (localStorage.getItem(\"2048\")) {\r\n\t\treturn JSON.parse(localStorage.getItem(\"2048\")!);\r\n\t}\r\n\r\n\tconst state: IStates = sizes.map(size => {\r\n\t\treturn {\r\n\t\t\tsize,\r\n\t\t\tundoMode: true,\r\n\t\t\tcells: initCells(size),\r\n\t\t\tscore: 0,\r\n\t\t\thighScore: 0,\r\n\t\t\tprevState: null,\r\n\t\t};\r\n\t});\r\n\r\n\tlocalStorage.setItem(\"2048\", JSON.stringify(state));\r\n\r\n\treturn state;\r\n};\r\n\r\nexport const getValueStyle = (value: number) => {\r\n\tswitch (value) {\r\n\t\tcase 2:\r\n\t\t\treturn \"two\";\r\n\t\tcase 4:\r\n\t\t\treturn \"four\";\r\n\t\tcase 8:\r\n\t\t\treturn \"eight\";\r\n\t\tcase 16:\r\n\t\t\treturn \"sixteen\";\r\n\t\tcase 32:\r\n\t\t\treturn \"thirty\";\r\n\t\tcase 64:\r\n\t\t\treturn \"sixty\";\r\n\t\tcase 128:\r\n\t\t\treturn \"hundred\";\r\n\t\tcase 256:\r\n\t\t\treturn \"two-handred\";\r\n\t\tcase 512:\r\n\t\t\treturn \"five-hundred\";\r\n\t\tcase 1024:\r\n\t\t\treturn \"thousand\";\r\n\t\tcase 2048:\r\n\t\t\treturn \"two-thousands\";\r\n\t\tdefault:\r\n\t\t\treturn \"black\";\r\n\t}\r\n};","import { Key } from \"react\";\r\nimport { getPrevState, setDifferentCell } from \"./initState\";\r\nimport { IGameState, ICell, Matrix, CellStates } from \"./interfaces\";\r\n\r\nexport default class Game {\r\n\tprevState: IGameState;\r\n\tconstructor(public state: IGameState) {\r\n\t\tthis.prevState = getPrevState(this.state.size);\r\n\t\tthis.state.prevState = {\r\n\t\t\t...this.prevState,\r\n\t\t\tprevState: null,\r\n\t\t};;\r\n\t}\r\n\r\n\tisMoving() {\r\n\t\tconst getXYCells = (cells: ICell[]) =>\r\n\t\t\tcells.map(cell => ({\r\n\t\t\t\tx: cell.x,\r\n\t\t\t\ty: cell.y,\r\n\t\t\t}));\r\n\t\treturn (\r\n\t\t\tJSON.stringify(getXYCells(this.state.cells)) !==\r\n\t\t\tJSON.stringify(getXYCells(this.prevState.cells))\r\n\t\t);\r\n\t}\r\n\r\n\tfinish() {\r\n\t\tconst { cells } = this.state;\r\n\t\tconst matrix = this.createMatrixFromCells(cells);\r\n\t\tconst canMove = () => {\r\n\t\t\tif (cells.length === this.state.size ** 2) {\r\n\t\t\t\tfor (let y = 0; y < matrix.length; y++) {\r\n\t\t\t\t\tfor (let x = 0; x < matrix.length; x++) {\r\n\t\t\t\t\t\tlet prevX = x - 1;\r\n\t\t\t\t\t\tlet nextX = x + 1;\r\n\t\t\t\t\t\tlet nextY = y + 1;\r\n\t\t\t\t\t\tlet prevY = y - 1;\r\n\t\t\t\t\t\tlet value = matrix[y][x]?.value;\r\n\t\t\t\t\t\tlet checkValues: any[] = [];\r\n\t\t\t\t\t\tfor (let Yindex of [prevY, nextY]) {\r\n\t\t\t\t\t\t\tfor (let Xindex of [prevX, nextX]) {\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\tXindex >= 0 &&\r\n\t\t\t\t\t\t\t\t\tXindex < matrix.length &&\r\n\t\t\t\t\t\t\t\t\tYindex >= 0 &&\r\n\t\t\t\t\t\t\t\t\tYindex < matrix.length\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tcheckValues.push(matrix[y][Xindex]?.value);\r\n\t\t\t\t\t\t\t\t\tcheckValues.push(matrix[Yindex][x]?.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (let checkValue of checkValues) {\r\n\t\t\t\t\t\t\tif (value === checkValue) {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\treturn !canMove();\r\n\t}\r\n\r\n\tpopulateField(): ICell[] {\r\n\t\tconst cells = [...this.state.cells];\r\n\r\n\t\tif (!this.isMoving()) {\r\n\t\t\treturn cells;\r\n\t\t}\r\n\t\tconst newCells = [...cells, setDifferentCell(cells, this.state.size)];\r\n\t\tthis.state.cells = newCells;\r\n\t\treturn newCells;\r\n\t}\r\n\r\n\tremoveAndIncreaseCells(): ICell[] {\r\n\t\tconst newCells = [...this.state.cells]\r\n\t\t\t.filter(cell => cell.state !== CellStates.DYING)\r\n\t\t\t.map(cell => {\r\n\t\t\t\tif (cell.state === CellStates.INCREASE) {\r\n\t\t\t\t\tcell.value *= 2;\r\n\t\t\t\t\tthis.state.score += cell.value;\r\n\t\t\t\t\tif (this.state.highScore < this.state.score) {\r\n\t\t\t\t\t\tthis.state.highScore = this.state.score;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcell.state = CellStates.IDLE;\r\n\t\t\t\treturn cell;\r\n\t\t\t});\r\n\t\tthis.state.cells = newCells;\r\n\t\treturn newCells;\r\n\t}\r\n\r\n\tmoveCells(key: Key): ICell[] {\r\n\t\tconst cells: ICell[] = [...this.state.cells];\r\n\t\tif (\r\n\t\t\tkey !== \"ArrowLeft\" &&\r\n\t\t\tkey !== \"ArrowDown\" &&\r\n\t\t\tkey !== \"ArrowRight\" &&\r\n\t\t\tkey !== \"ArrowUp\"\r\n\t\t)\r\n\t\t\treturn cells;\r\n\t\tconst matrix = this.createMatrixFromCells(cells);\r\n\t\tthis.rotateMatrixFromDirection(matrix, key);\r\n\t\tfor (let y = 0; y < this.state.size; y++) {\r\n\t\t\tfor (let x = 0; x < this.state.size; x++) {\r\n\t\t\t\tif (matrix[y][x]) {\r\n\t\t\t\t\tthis.moveCell(matrix, x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.rotateMatrixToDirection(matrix, key);\r\n\t\tfor (let y = 0; y < this.state.size; y++) {\r\n\t\t\tfor (let x = 0; x < this.state.size; x++) {\r\n\t\t\t\tif (matrix[y][x]) {\r\n\t\t\t\t\tmatrix[y][x]!.y = y;\r\n\t\t\t\t\tmatrix[y][x]!.x = x;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcells\r\n\t\t\t.filter(cell => cell.by)\r\n\t\t\t.forEach(cell => {\r\n\t\t\t\tcell.x = cell.by!.x!;\r\n\t\t\t\tcell.y = cell.by!.y!;\r\n\t\t\t\tdelete cell.by;\r\n\t\t\t});\r\n\r\n\t\treturn cells;\r\n\t}\r\n\r\n\tprivate moveCell(matrix: Matrix, x: number, y: number): void {\r\n\t\tlet nextRow = y - 1;\r\n\t\tlet currRow = y;\r\n\t\twhile (nextRow >= 0) {\r\n\t\t\tif (matrix[nextRow][x] === null) {\r\n\t\t\t\tmatrix[nextRow][x] = matrix[currRow][x];\r\n\t\t\t\tmatrix[currRow][x]!.state = CellStates.MOVING;\r\n\t\t\t\tmatrix[currRow][x] = null;\r\n\t\t\t\tcurrRow = nextRow;\r\n\t\t\t} else if (\r\n\t\t\t\tmatrix[nextRow][x]!.value === matrix[currRow][x]!.value &&\r\n\t\t\t\t(matrix[nextRow][x]!.state === CellStates.IDLE ||\r\n\t\t\t\t\tmatrix[nextRow][x]!.state === CellStates.MOVING ||\r\n\t\t\t\t\tmatrix[nextRow][x]!.state === CellStates.NEW)\r\n\t\t\t) {\r\n\t\t\t\tmatrix[nextRow][x]!.state = CellStates.DYING;\r\n\t\t\t\tmatrix[nextRow][x]!.by = matrix[currRow][x]!;\r\n\t\t\t\tmatrix[currRow][x]!.state = CellStates.INCREASE;\r\n\t\t\t\tmatrix[nextRow][x] = matrix[currRow][x];\r\n\t\t\t\tmatrix[currRow][x] = null;\r\n\t\t\t\tcurrRow = nextRow;\r\n\t\t\t} else break;\r\n\t\t\tnextRow -= 1;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rotateMatrix(matrix: any[][]) {\r\n\t\tmatrix = matrix.reverse();\r\n\t\tfor (var i = 0; i < matrix.length; i++) {\r\n\t\t\tfor (var j = 0; j < i; j++) {\r\n\t\t\t\tvar temp = matrix[i][j];\r\n\t\t\t\tmatrix[i][j] = matrix[j][i];\r\n\t\t\t\tmatrix[j][i] = temp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate rotateMatrixFromDirection(matrix: any[][], key: Key) {\r\n\t\tswitch (key) {\r\n\t\t\tcase \"ArrowLeft\":\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrowDown\":\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrowRight\":\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate rotateMatrixToDirection(matrix: any[][], key: Key) {\r\n\t\tswitch (key) {\r\n\t\t\tcase \"ArrowRight\":\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrowDown\":\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ArrowLeft\":\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tthis._rotateMatrix(matrix);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createMatrixFromCells(cells: ICell[]): Matrix {\r\n\t\tconst matrix: Matrix = Array.from(new Array(this.state.size), () =>\r\n\t\t\tArray.from(new Array(this.state.size), () => null)\r\n\t\t);\r\n\t\tcells.forEach(cell => {\r\n\t\t\tmatrix[cell.y][cell.x] = cell;\r\n\t\t});\r\n\t\treturn matrix;\r\n\t}\r\n}\r\n\r\n","import React, { createRef, useEffect, useState } from \"react\";\r\nimport { getValueStyle } from \"../initState\";\r\nimport { CellStates, ICellProps } from \"../interfaces\";\r\n\r\nconst Cell: React.FC<ICellProps> = ({\r\n\tx,\r\n\ty,\r\n\tvalue,\r\n\tsize,\r\n\tborder,\r\n\tstate,\r\n}: ICellProps) => {\r\n\tconst [currValue, setCurrValue] = useState(value);\r\n\tconst [highLight, setHighLight] = useState(false);\r\n\tconst cellRef = createRef<HTMLDivElement>();\r\n\r\n\tconst onAnimationEnd = () => {\r\n\t\tsetHighLight(false);\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (value !== currValue) {\r\n\t\t\tsetHighLight(true);\r\n\t\t}\r\n\t}, [currValue, value]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst onTransitionEnd = (event: TransitionEvent) => {\r\n\t\t\tif (value !== currValue) {\r\n\t\t\t\tsetCurrValue(value);\r\n\t\t\t}\r\n\t\t};\r\n\t\tconst cell = cellRef.current;\r\n\t\tcell?.addEventListener(\"transitionend\", onTransitionEnd);\r\n\t\treturn () => cell?.removeEventListener(\"transitionend\", onTransitionEnd);\r\n\t}, [cellRef, currValue, state, value]);\r\n\r\n\tconst className = `${getValueStyle(value)} game__cell play-cell ${\r\n\t\tstate === CellStates.MOVING || state === CellStates.INCREASE ? \"moving\" : \"\"\r\n\t} ${highLight ? \"highlight\" : \"\"} ${state === CellStates.NEW ? \"new\" : \"\"} `;\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tref={cellRef}\r\n\t\t\tonAnimationEnd={onAnimationEnd}\r\n\t\t\tclassName={className}\r\n\t\t\tid={value.toString()}\r\n\t\t\tstyle={{\r\n\t\t\t\theight: `${size}px`,\r\n\t\t\t\twidth: `${size}px`,\r\n\t\t\t\tlineHeight: `${size}px`,\r\n\t\t\t\tleft: `${x * (size + 10) + border}px`,\r\n\t\t\t\ttop: `${y * (size + 10) + border}px`,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{value}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Cell;","import React from \"react\";\r\nimport { ModalProps } from \"../interfaces\";\r\n\r\nconst Modal: React.FC<ModalProps> = ({\r\n\ttype,\r\n\tsetModal,\r\n\treplayHandler,\r\n\texitHandler,\r\n\tsetCanMove,\r\n}: ModalProps) => {\r\n\tconst continueHandler = () => {\r\n\t\tsetCanMove(true);\r\n\t\tsetModal(\"never\");\r\n\t};\r\n\r\n\tif (type === \"2048\") {\r\n\t\tsetCanMove(false);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"modal\">\r\n\t\t\t{type === \"2048\" ? (\r\n\t\t\t\t<div className=\"modal__btns\">\r\n\t\t\t\t\t<button className=\"modal__btns__btn\" onClick={continueHandler}>\r\n\t\t\t\t\t\tContinue\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"modal__btns__btn\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetModal(undefined);\r\n\t\t\t\t\t\t\treplayHandler();\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tReplay\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<div className=\"modal__btns\">\r\n\t\t\t\t\t<button className=\"modal__btns__btn\" onClick={exitHandler}>\r\n\t\t\t\t\t\tEXIT\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"modal__btns__btn\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tsetModal(undefined);\r\n\t\t\t\t\t\t\treplayHandler();\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tREPLAY\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Modal;","import React, { useEffect, useState } from \"react\";\r\nimport Game from \"../Game\";\r\nimport { IGameState, IGridProps, ModalType } from \"../interfaces\";\r\nimport Cell from \"./Cell\";\r\nimport Modal from \"./Modal\";\r\n\r\nconst Grid: React.FC<IGridProps> = props => {\r\n\tconst {\r\n\t\tgameState,\r\n\t\tsetGameState,\r\n\t\texitHandler,\r\n\t\treplayHandler,\r\n\t\tplaySwipe,\r\n\t} = props;\r\n\tconst [cells, setCells] = useState(gameState.cells);\r\n\tconst [canMove, setCanMove] = useState(true);\r\n\tconst { size } = gameState;\r\n\tconst [modal, setModal] = useState<ModalType>();\r\n\r\n\tconst delay = async (ms: number) => {\r\n\t\treturn new Promise(resolve => setTimeout(resolve, ms));\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (cells.some(cell => cell.value === 2048) && modal !== \"never\") {\r\n\t\t\tsetModal(\"2048\");\r\n\t\t}\r\n\t}, [cells, modal]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetCells(gameState.cells);\r\n\t}, [gameState]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handler = async (event: KeyboardEvent) => {\r\n\t\t\tif (canMove) {\r\n\t\t\t\tconst game = new Game(gameState);\r\n\t\t\t\tsetCanMove(false);\r\n\t\t\t\tsetCells(game.moveCells(event.key));\r\n\t\t\t\tif (game.isMoving()) {\r\n\t\t\t\t\tplaySwipe();\r\n\t\t\t\t}\r\n\t\t\t\tawait delay(100);\r\n\t\t\t\tsetCells(game.removeAndIncreaseCells());\r\n\t\t\t\tsetCells(game.populateField());\r\n\t\t\t\tsetGameState((state: IGameState) => ({\r\n\t\t\t\t\t...game.state,\r\n\t\t\t\t}));\r\n\t\t\t\tif (game.finish()) {\r\n\t\t\t\t\tsetModal(\"gameover\");\r\n\t\t\t\t}\r\n\t\t\t\tsetCanMove(true);\r\n\t\t\t}\r\n\t\t};\r\n\t\tdocument.addEventListener(\"keydown\", handler);\r\n\t\treturn () => document.removeEventListener(\"keydown\", handler);\r\n\t}, [canMove, gameState, playSwipe, setGameState]);\r\n\r\n\tconst cellSize: number = 100;\r\n\tconst border: number = cellSize / 20;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"game\"\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: `${cellSize * size + (size + 1) * border * 2}px`,\r\n\t\t\t\t\theight: `${cellSize * size + (size + 1) * border * 2}px`,\r\n\t\t\t\t\ttransform: `scale(${4 / size}) translate(${\r\n\t\t\t\t\t\t(100 * (4 - size)) / 8\r\n\t\t\t\t\t}%, ${(100 * (4 - size)) / 8}%)`,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"game__background\">\r\n\t\t\t\t\t{Array.from(new Array(size ** 2), (_, i) => i).map((_, i) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\theight: `${cellSize}px`,\r\n\t\t\t\t\t\t\t\t\twidth: `${cellSize}px`,\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tclassName=\"game__cell\"\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t></div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game__background playground\">\r\n\t\t\t\t\t{cells.map(cell => (\r\n\t\t\t\t\t\t<Cell\r\n\t\t\t\t\t\t\tx={cell.x}\r\n\t\t\t\t\t\t\ty={cell.y}\r\n\t\t\t\t\t\t\tvalue={cell.value}\r\n\t\t\t\t\t\t\tkey={cell.id}\r\n\t\t\t\t\t\t\tsize={cellSize}\r\n\t\t\t\t\t\t\tborder={border}\r\n\t\t\t\t\t\t\tstate={cell.state}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{modal && modal !== \"never\" ? (\r\n\t\t\t\t<Modal\r\n\t\t\t\t\tsetModal={setModal}\r\n\t\t\t\t\ttype={modal}\r\n\t\t\t\t\treplayHandler={replayHandler}\r\n\t\t\t\t\texitHandler={exitHandler}\r\n\t\t\t\t\tsetCanMove={setCanMove}\r\n\t\t\t\t/>\r\n\t\t\t) : null}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Grid;\r\n","export default __webpack_public_path__ + \"static/media/swipe.f8765271.mp3\";","import React, { useState } from \"react\";\r\nimport useSound from \"use-sound\";\r\nimport { initCells } from \"../initState\";\r\nimport { IGameState, IGameWrapperProps } from \"../interfaces\";\r\nimport { saveGame } from \"../saveGame\";\r\nimport Grid from \"./Grid\";\r\nimport swipeSound from \"../sounds/swipe.mp3\";\r\n\r\nconst GameWrapper: React.FC<IGameWrapperProps> = (props) => {\r\n\tconst [gameState, setGameState] = useState<IGameState>(props.gameState);\r\n\tconst { score, highScore } = gameState;\r\n\tconst [volume, setVolume] = useState(0.25);\r\n\r\n\tsaveGame(gameState);\r\n\r\n\tconst [playSwipe] = useSound(swipeSound, { volume });\r\n\r\n\tconst volumeHandler = () => {\r\n\t\tsetVolume(volume === 0.25 ? 0.5 : volume === 0.5 ? 0 : 0.25);\r\n\t};\r\n\r\n\tconst undoHandler = () => {\r\n\t\tsetGameState((state: IGameState) => {\r\n\t\t\tif (state.prevState) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state.prevState,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t});\r\n\t};\r\n\r\n\tconst replayHandler = () => {\r\n\t\tsetGameState(state => ({\r\n\t\t\t...state,\r\n\t\t\tscore: 0,\r\n\t\t\tcells: initCells(state.size),\r\n\t\t\tprevState: state,\r\n\t\t}));\r\n\t};\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<header>\r\n\t\t\t\t<div className=\"score-container\">\r\n\t\t\t\t\t<h1 className=\"title\">2048</h1>\r\n\t\t\t\t\t<div className=\"score-block\">\r\n\t\t\t\t\t\t<div className=\"score header-item\">\r\n\t\t\t\t\t\t\t<h5>SCORE</h5>\r\n\t\t\t\t\t\t\t<h3>{score}</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"score header-item\">\r\n\t\t\t\t\t\t\t<h5>HIGH SCORE</h5>\r\n\t\t\t\t\t\t\t<h3>{highScore}</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<nav className=\"additions\">\r\n\t\t\t\t\t<div className=\"additions__left\">\r\n\t\t\t\t\t\t<button onClick={props.exitHandler} className=\"back header-item\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">exit_to_app</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button onClick={volumeHandler} className=\"back header-item\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">\r\n\t\t\t\t\t\t\t\t{volume === 0\r\n\t\t\t\t\t\t\t\t\t? \"volume_mute\"\r\n\t\t\t\t\t\t\t\t\t: volume === 0.25\r\n\t\t\t\t\t\t\t\t\t? \"volume_down\"\r\n\t\t\t\t\t\t\t\t\t: \"volume_up\"}\r\n\t\t\t\t\t\t\t</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"additions__right\">\r\n\t\t\t\t\t\t<button onClick={undoHandler} className=\"replay header-item\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">undo</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<button onClick={replayHandler} className=\"replay header-item\">\r\n\t\t\t\t\t\t\t<i className=\"material-icons\">replay</i>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</nav>\r\n\t\t\t</header>\r\n\t\t\t<Grid\r\n\t\t\t\tgameState={gameState}\r\n\t\t\t\tsetGameState={setGameState}\r\n\t\t\t\treplayHandler={replayHandler}\r\n\t\t\t\texitHandler={props.exitHandler}\r\n\t\t\t\tplaySwipe={playSwipe}\r\n\t\t\t/>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default GameWrapper;\r\n","import { IGameState } from \"./interfaces\";\r\n\r\nexport const saveGame = (gameState: IGameState) => {\r\n\tconst saveStates: IGameState[] = JSON.parse(localStorage.getItem(\"2048\")!);\r\n\tconst newStates = saveStates.map(state => {\r\n\t\tif (state.size === gameState.size) {\r\n\t\t\treturn gameState;\r\n\t\t}\r\n\t\treturn state;\r\n\t});\r\n\t\r\n\tlocalStorage.setItem(\"2048\", JSON.stringify(newStates));\r\n};\r\n","import React from 'react'\r\nimport { IMenuProps } from '../interfaces';\r\n\r\nconst Menu: React.FC<IMenuProps> = ({\r\n\tprevSizeHandler,\r\n\tnextSizeHandler,\r\n\tstartHandler,\r\n\tsize,\r\n}: IMenuProps) => {\r\n\treturn (\r\n\t\t<div className=\"menu\">\r\n\t\t\t<div className=\"menu-grid\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={\r\n\t\t\t\t\t\tsize === 4 ? \"four-pic\" : size === 6 ? \"six-pic\" : \"eight-pic\"\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<nav className=\"size-nav\">\r\n\t\t\t\t<button onClick={prevSizeHandler}>{\"<\"}</button>\r\n\t\t\t\t<span>{`${size}x${size}`}</span>\r\n\t\t\t\t<button onClick={nextSizeHandler}>{\">\"}</button>\r\n\t\t\t</nav>\r\n\t\t\t<button className=\"menu-btn\" onClick={startHandler}>\r\n\t\t\t\tStart Game\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Menu\r\n","import React, { useState } from \"react\";\r\nimport \"./App.scss\";\r\nimport GameWrapper from \"./Components/GameWrapper\";\r\nimport Menu from \"./Components/Menu\";\r\nimport { sizes } from \"./constants\";\r\nimport { initState } from \"./initState\";\r\nimport { IStates, Size } from \"./interfaces\";\r\n\r\nconst App: React.FC = () => {\r\n\tconst startState: IStates = initState();\r\n\r\n\tconst [play, setPlay] = useState<boolean>(false);\r\n\tconst [size, setSize] = useState<Size>(sizes[0]);\r\n\r\n\tconst startHandler = (): void => {\r\n\t\tsetPlay(true);\r\n\t};\r\n\r\n\tconst nextSizeHandler = (): void => {\r\n\t\tsetSize(\r\n\t\t\tsizes.indexOf(size) + 1 >= sizes.length\r\n\t\t\t\t? sizes[0]\r\n\t\t\t\t: sizes[sizes.indexOf(size) + 1]\r\n\t\t);\r\n\t};\r\n\r\n\tconst prevSizeHandler = (): void => {\r\n\t\tsetSize(\r\n\t\t\tsizes.indexOf(size) === 0\r\n\t\t\t\t? sizes[sizes.length - 1]\r\n\t\t\t\t: sizes[sizes.indexOf(size) - 1]\r\n\t\t);\r\n\t};\r\n\r\n\tconst exitHandler = () => {\r\n\t\tsetPlay(false);\r\n\t};\r\n\r\n\tconst gameState = startState[sizes.indexOf(size)];\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t{play ? (\r\n\t\t\t\t<GameWrapper gameState={gameState} exitHandler={exitHandler} />\r\n\t\t\t) : (\r\n\t\t\t\t<Menu\r\n\t\t\t\t\tprevSizeHandler={prevSizeHandler}\r\n\t\t\t\t\tnextSizeHandler={nextSizeHandler}\r\n\t\t\t\t\tstartHandler={startHandler}\r\n\t\t\t\t\tsize={size}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}